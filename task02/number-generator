#! /bin/bash

# Global variables
upper_range_limit=100
guessing_tries=3
user_number=0
random_number=0
is_guessed=0

get_user_number(){
  local un=""
  read -rp "Enter your number: " un
  # Check. Is user_number variable a type of integer ?
  until [[ -n "$un" ]] || [[ $un =~ ^[0-9]+$ ]]; do
      read -rp "error: \"$un\"cannot be type of int. Try again: " un
  done
  user_number=$un
}

get_random_number(){
	random_number=$((RANDOM % upper_range_limit))
	echo "Generated random number in range [0-$upper_range_limit]"
}


compare(){
if (( is_guessed == 0 )); then
  if ((random_number > user_number)); then
	    echo "Randomly generated number is greater than $user_number"; return 1
    elif ((random_number < user_number)); then
	    echo "Randomly generated number is less than $user_number"; return 1
    else
      is_guessed=1
	    echo " Bingo !!! Randomly generated number is $random_number"; return 0
  fi
else return 0
fi;
}

# Extracting flags from positional parameters
options=$(getopt -l "upper:,retries:" -o "u:r:" -- "$@")
eval set -- "$options"; # Sorting flags and positional parameters with "--" delimiter
echo "Options $options"

# Flags processing
while true; do
  case $1 in
  -u|--upper) shift; upper_range_limit=$1 ;;
  -r|--retries) shift; guessing_tries=$1 ;;
  --) shift; break ;;
  esac
  shift
done

# Validation of "upper_range_limit" variable
until [[ $upper_range_limit =~ ^[0-9]+$ ]] && ((upper_range_limit >= 1 && upper_range_limit <= 100)); do
  echo "$upper_range_limit is not in range from 1 to 100"
  read -rp "Enter upper range limit number (1-100): " upper_range_limit
  if [[ $upper_range_limit =~ ^[0-9]+$ ]] && ((upper_range_limit >= 1 && upper_range_limit <= 100)); then
    break
  fi
done

# Validation of "$guessing_tries" variable
until [[ $guessing_tries =~ ^[0-9]+$ ]] && ((guessing_tries >= 1 && guessing_tries <= 20)); do
  echo "$guessing_tries is not appropriate for the guessing tries. "
  echo "Enter number in range from 1 to 20"
  read -rp "Enter upper range limit number (1-100): " guessing_tries
  if [[ $guessing_tries =~ ^[0-9]+$ ]] && ((guessing_tries >= 1 && guessing_tries <= 20)); then
    break
  fi
done


get_random_number

# Getting user_number
if [[ $# -ge 1 ]] && [[ $1 =~ ^[0-9]+$ ]]; then
  user_number=$1
  shift
  else get_user_number
fi

echo ""
echo "You have tries: $guessing_tries"
echo "Your current try: 1"
compare;

repeat="-";
while true; do

  if [ -z "$repeat" ]; then
      counter=1; get_random_number
      else counter=2
  fi

  # Main loop
  until [[ $counter -gt $guessing_tries ]] || (( is_guessed == 1 )); do

    echo ""
    echo "You have tries: $guessing_tries"
    echo "Your current try: $counter"
    ((counter++))

    get_user_number
    if compare; then break; fi
  done

  if (( is_guessed == 1 )); then
    echo "";read -rp "Play again? (Y/n): " repeat; echo "";
    if [[ -z "$repeat" ]] || [[ "$repeat" =~ ^[1Yy][e][s] ]]; then
      repeat=""
      is_guessed=0
    else break
    fi
  else
    echo "";
    echo " ## Ups. Failed. Random number was $random_number";
    echo "";
    break
  fi
done